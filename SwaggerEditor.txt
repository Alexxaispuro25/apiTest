swagger: "2.0"
info:
  description: "API de ejemplo para un CRUD de productos"
  version: "1.0.0"
  title: "API de Productos"
host: "localhost:8080"
basePath: "/api"
schemes:
  - "http"
paths:
  /agregarProducto:
    post:
      summary: Agregar un nuevo producto
      description: Agrega un nuevo producto a la base de datos.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: producto
          description: Datos del producto a agregar
          required: true
          schema:
            $ref: '#/definitions/Producto'
      responses:
        200:
          description: Producto agregado exitosamente
          schema:
            $ref: '#/definitions/Producto'
        400:
          description: Error al agregar el producto
          schema:
            $ref: '#/definitions/Error'
  /agregarProductos:
    post:
      summary: Agregar varios productos
      description: Agrega una lista de productos a la base de datos.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: productos
          description: Lista de productos a agregar
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Producto'
      responses:
        200:
          description: Productos agregados exitosamente
          schema:
            type: array
            items:
              $ref: '#/definitions/Producto'
        400:
          description: Error al agregar los productos
          schema:
            $ref: '#/definitions/Error'
  /producto/:
    get:
      summary: Obtener todos los productos
      description: Obtiene todos los productos de la base de datos.
      produces:
        - application/json
      responses:
        200:
          description: Productos obtenidos exitosamente
          schema:
            type: array
            items:
              $ref: '#/definitions/Producto'
  /productoPorId/{id}:
    get:
      summary: Obtener producto por ID
      description: Obtiene un producto por su ID de la base de datos.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID del producto a obtener
          required: true
          type: integer
      responses:
        200:
          description: Producto obtenido exitosamente
          schema:
            $ref: '#/definitions/Producto'
        404:
          description: Producto no encontrado
          schema:
            $ref: '#/definitions/Error'
  /productoPorNombre/{nombre}:
    get:
      summary: Obtener producto por nombre
      description: Obtiene un producto por su nombre de la base de datos.
      produces:
        - application/json
      parameters:
        - in: path
          name: nombre
          description: Nombre del producto a obtener
          required: true
          type: string
      responses:
        200:
          description: Producto obtenido exitosamente
          schema:
            $ref: '#/definitions/Producto'
  /actualizar:
    put:
      summary: Actualizar producto
      description: Actualiza un producto existente en la base de datos.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: producto
          description: Datos del producto a actualizar
          required: true
          schema:
            $ref: '#/definitions/ProductoConID'
      responses:
        200:
          description: Producto actualizado exitosamente
          schema:
            $ref: '#/definitions/Producto'
  /borrar/{id}:
    delete:
      summary: Borrar producto
      description: Elimina un producto de la base de datos por su ID.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID del producto a borrar
          required: true
          type: integer
      responses:
        200:
          description: Producto eliminado exitosamente
          schema:
            type: string
        404:
          description: Producto no encontrado
          schema:
            $ref: '#/definitions/Error'
definitions:
  Producto:
    type: object
    properties:
      nombre:
        type: string
      descripcion:
        type: string
      precio:
        type: number
    required:
      - nombre
      - descripcion
      - precio
  ProductoConID:
    type: object
    properties:
      id:
        type: integer
      nombre:
        type: string
      descripcion:
        type: string
      precio:
        type: number
    required:
      - id
      - nombre
      - descripcion
      - precio
  Error:
    type: object
    properties:
      message:
        type: string
      httpStatus:
        type: string
      timestamp:
        type: string
        format: date-time
